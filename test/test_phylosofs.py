import phylosofs
import unittest
import subprocess
import os

TEMP_DIR = os.path.dirname(os.path.abspath(__file__))


def compare_files(fpath1, fpath2):
    """
    Compare two files without taking into account newline characters.

    It allows to compare files generated by linux and windows.
    Code from:
    https://stackoverflow.com/questions/40751389/compare-2-files-line-by-line-ignoring-newline-differences
    """
    with open(fpath1, 'r') as file1, open(fpath2, 'r') as file2:
        for linef1, linef2 in zip(file1, file2):
            linef1 = linef1.rstrip('\r\n')
            linef2 = linef2.rstrip('\r\n')
            if linef1 != linef2:
                return False
        return next(file1, None) is None and next(file2, None) is None


def path_tmp(filename):
    "Return the path to test/tmp/filename using os.path.join()."
    return os.path.abspath(os.path.join(TEMP_DIR, "tmp", filename))


def path_dat(filename):
    "Return the path to test/data/filename using os.path.join()."
    return os.path.abspath(os.path.join(TEMP_DIR, "data", filename))


# os.path.join("test", "tmp")
PATH_TMP = os.path.abspath(os.path.join(TEMP_DIR, "tmp"))
PATH_PHYLOSOFS = os.path.abspath(
    os.path.join(TEMP_DIR, "..", "phylosofs", "phylosofs.py"))

if not os.path.isdir(PATH_TMP):
    os.mkdir(PATH_TMP)


class Test_PhyloSofS(unittest.TestCase):
    def test_phylosofs(self):
        path_transcripts = os.path.abspath(
            os.path.join(TEMP_DIR, "..", "dat", "JNK3.transcripts"))
        path_newick = os.path.abspath(
            os.path.join(TEMP_DIR, "..", "dat", "JNK3.nwk"))
        command = [
            # "python", PATH_PHYLOSOFS,
            "phylosofs",
            "-P",
            "-o",
            PATH_TMP,
            "--tree",
            path_newick,
            "--transcripts",
            path_transcripts
        ]
        self.assertEqual(subprocess.call(command), 0)
        self.assertTrue(
            compare_files(path_tmp('treeSearch_532_1.txt'),
                          path_dat('treeSearch_532_1.txt')))
        self.assertTrue(
            compare_files(path_tmp('solution_532_1_config0.sum'),
                          path_dat('solution_532_1_config0.sum')))
        self.assertTrue(
            compare_files(path_tmp('solution_532_1_config0.info'),
                          path_dat('solution_532_1_config0.info')))
        self.assertFalse(
            os.path.isdir(os.path.join(TEMP_DIR, "tmp", "bestTopos")))
        self.assertFalse(
            os.path.isdir(os.path.join(TEMP_DIR, "tmp", "betterTrees")))

    def test_best_topos_and_trees(self):
        path_transcripts = os.path.abspath(
            os.path.join(TEMP_DIR, "..", "dat", "JNK3.transcripts"))
        path_newick = os.path.abspath(
            os.path.join(TEMP_DIR, "..", "dat", "JNK3.nwk"))
        command = [
            # "python", PATH_PHYLOSOFS,
            "phylosofs",
            "-P",
            "-o",
            PATH_TMP,
            "-s",
            "100",
            "--tree",
            path_newick,
            "--transcripts",
            path_transcripts
        ]
        self.assertEqual(subprocess.call(command), 0)
        self.assertTrue(
            os.path.isdir(
                os.path.abspath(os.path.join(TEMP_DIR, "tmp", "bestTopos"))))
        self.assertTrue(
            os.path.isdir(
                os.path.abspath(os.path.join(TEMP_DIR, "tmp", "betterTrees"))))
        self.assertGreater(
            len(
                os.listdir(
                    os.path.abspath(os.path.join(TEMP_DIR, "tmp",
                                                 "bestTopos")))), 0)
        self.assertGreater(
            len(
                os.listdir(
                    os.path.abspath(
                        os.path.join(TEMP_DIR, "tmp", "betterTrees")))), 0)

    def tearDown(self):
        phylosofs.utils.clear_folder(PATH_TMP)


if __name__ == '__main__':
    unittest.main()
